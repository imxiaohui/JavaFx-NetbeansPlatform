2.1 Java Beans and Properties.

Qué es un java bean?

Una clase que almacena o encapsula información o datos de negocio como campos de la clase. Se accede la información mediante métodos llamados 
setters y se lee la información mediante métodos llamados getters. Cuando estos nombres siguen el estandar de nombres, se le llama 
propiedades a los atributos.

Para ser un java bean la clase:
1.- Debe tener un constructor sin argumentos
2.- Todos sus atributos deben ser privados
3.- Debe tener un acceso a sus propiedades por medio de 
    getters y setters
4.- Debe ser serializable

Si se siguen todas estas convenciones, entonces la clase es un java bean. Su objetivo:

Representar un objeto de negocio.

Si los métodos de acceso a los campos privados siguen un estandar en los nombres, entonces a los 
campos se les denomina "propiedades" del java bean.

Es importante recordar que el concepto de java bean es solo un estandar, pero es importante
ya que se utiliza mucho para desarrollar sobre el netbeans platform.


¿Por qué es tan importante que las propiedades sean privadas, y se usen getters y setters?
Este enfoque nos permite tener mayor control sobre la informaciÃ³n que es alimentada a nuestros atributos.

Ejemplo, tenemos la clase Fecha, la cual tiene mes y dÃ­a.

El día 31 no siempre será correcto asignarlo al atributo dÃ­a. Esto dependerÃ¡ del mes. Al tener la propiedad
	-private int dia;

Se restringe que otra clase pueda hacer fecha.dia. Se forza a pasar por el mÃ©todo setter, el cual puede validar a quÃ©
mes se hace referencia, para determinar si el dÃ­a es correcto.

Sobreescritura de mÃ©todos de un Java Bean

equals permite comparar a mi objeto con otro objeto. 
hashCode permite generar un identificador Ãºnico del objeto para cuando se usan hashes o tablas.
toString es un mÃ©todo en el que se define la representaciÃ³n en cadena de caracteres del objeto.
