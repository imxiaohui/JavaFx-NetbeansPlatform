/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.dialogs;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.asgteach.dialogs//Dialog//EN",
        autostore = false)
@TopComponent.Description(preferredID = "DialogTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.asgteach.dialogs.DialogTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DialogAction",
        preferredID = "DialogTopComponent")
@Messages({
    "CTL_DialogAction=Dialog",
    "CTL_DialogTopComponent=Dialog Window",
    "HINT_DialogTopComponent=This is a Dialog window"
})
public final class DialogTopComponent extends TopComponent {

    private final CustomPersonPanel panel = new CustomPersonPanel();
    private final CustomPersonPanel2 panel2 = new CustomPersonPanel2();

    public DialogTopComponent() {
        initComponents();
        setName(Bundle.CTL_DialogTopComponent());
        setToolTipText(Bundle.HINT_DialogTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoMessageButton = new javax.swing.JButton();
        warningMessageButton = new javax.swing.JButton();
        errorMessageButton = new javax.swing.JButton();
        questionButton = new javax.swing.JButton();
        inputButton = new javax.swing.JButton();
        welcomButton = new javax.swing.JButton();
        welcomeErrorButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(infoMessageButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.infoMessageButton.text")); // NOI18N
        infoMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoMessageButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(warningMessageButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.warningMessageButton.text")); // NOI18N
        warningMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warningMessageButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(errorMessageButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.errorMessageButton.text")); // NOI18N
        errorMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorMessageButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(questionButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.questionButton.text")); // NOI18N
        questionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(inputButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.inputButton.text")); // NOI18N
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(welcomButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.welcomButton.text")); // NOI18N
        welcomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(welcomeErrorButton, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.welcomeErrorButton.text")); // NOI18N
        welcomeErrorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeErrorButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(statusLabel, org.openide.util.NbBundle.getMessage(DialogTopComponent.class, "DialogTopComponent.statusLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(infoMessageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(warningMessageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorMessageButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionButton, javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(inputButton, javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(welcomButton, javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(welcomeErrorButton, javax.swing.GroupLayout.Alignment.CENTER))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoMessageButton)
                    .addComponent(errorMessageButton)
                    .addComponent(warningMessageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeErrorButton)
                .addGap(27, 27, 27)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Messages({
        "MSG_OrderComplete=Your order is complete.",
        "MSG_DialogOK=You clicked OK",
        "MSG_DialogClosed=You closed the dialog!"
    })
    private void infoMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoMessageButtonActionPerformed
        statusLabel.setText("");
        NotifyDescriptor nd = new NotifyDescriptor.Message(
                Bundle.MSG_OrderComplete());
        Object status = DialogDisplayer.getDefault().notify(nd);
        if (status == NotifyDescriptor.OK_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogOK());
        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogClosed());
        }
    }//GEN-LAST:event_infoMessageButtonActionPerformed

    @Messages({
        "MSG_FileQuestion=Do you REALLY want to delete all those files???",
        "MSG_QuestionTitle=Important Question",
        "MSG_Warning= Please pay attention!",
        "MSG_DialogYes=You clicked Yes",
        "MSG_DialogNo=You clicked NO",
        "MSG_DialogCancel=You clicked Cancel",})
    private void questionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionButtonActionPerformed
        statusLabel.setText("");

        NotifyDescriptor nd = new NotifyDescriptor.Confirmation("Do you like ice cream?");

//        nd.createNotificationLineSupport();
//        nd.getNotificationLineSupport().setWarningMessage(
//                Bundle.MSG_Warning());
        if (DialogDisplayer.getDefault().notify(nd) == DialogDescriptor.YES_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogYes());
        }
//        Object status = DialogDisplayer.getDefault().notify(nd);
//        if (status == NotifyDescriptor.YES_OPTION) {
//            statusLabel.setText(Bundle.MSG_DialogYes());
//        } else if (status == NotifyDescriptor.NO_OPTION) {
//            statusLabel.setText(Bundle.MSG_DialogNo());
//        } else if (status == NotifyDescriptor.CANCEL_OPTION) {
//            statusLabel.setText(Bundle.MSG_DialogCancel());
//        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
//            statusLabel.setText(Bundle.MSG_DialogClosed());
//        }
    }//GEN-LAST:event_questionButtonActionPerformed

    @Messages({
        "MSG_EmailTitle=Please provide your email address",
        "MSG_EmailPrompt=Email Address",
        "MSG_EmailResult=Here is your email: "
    })
    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
        statusLabel.setText("");
        NotifyDescriptor.InputLine nd = new NotifyDescriptor.InputLine(
                Bundle.MSG_EmailPrompt(),
                Bundle.MSG_EmailTitle());
        nd.setInputText("xxx @ yyy DOT org");
        Object status = DialogDisplayer.getDefault().notify(nd);

        if (status == NotifyDescriptor.OK_OPTION) {
            statusLabel.setText(Bundle.MSG_EmailResult() + nd.getInputText());
        } else if (status == NotifyDescriptor.CANCEL_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogCancel());
        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogClosed());
        }
    }//GEN-LAST:event_inputButtonActionPerformed

    @Messages({
        "MSG_PersonTitle=Person Information",
        "MSG_PersonRequiredFields= Fields First Name and Last Name are required.",
        "MSG_PersonFieldInfo= Please provide your first and last names.",
        "MSG_PersonHello=Hello, ",
        "MSG_PersonAnonymous=Anonymous",
        "MSG_PersonCancel=Okay, never mind!"
    })
    private void welcomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomButtonActionPerformed
        DialogDescriptor dd = new DialogDescriptor(panel, Bundle.MSG_PersonTitle());
        dd.createNotificationLineSupport();
        dd.getNotificationLineSupport().setInformationMessage(
                Bundle.MSG_PersonFieldInfo());
        Object status = DialogDisplayer.getDefault().notify(dd);
        if (status == NotifyDescriptor.OK_OPTION) {
            if (panel.getFirstName().isEmpty() && panel.getLastName().isEmpty()) {
                statusLabel.setText(Bundle.MSG_PersonHello()
                        + Bundle.MSG_PersonAnonymous());
            } else {
                statusLabel.setText(Bundle.MSG_PersonHello() + panel.getFirstName() + " "
                        + panel.getLastName() + "!");
            }
        } else if (status == NotifyDescriptor.CANCEL_OPTION) {
            statusLabel.setText(Bundle.MSG_PersonCancel());
        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogClosed());
        }
    }//GEN-LAST:event_welcomButtonActionPerformed

    private void welcomeErrorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeErrorButtonActionPerformed
        final DialogDescriptor dd = new DialogDescriptor(panel2,
                Bundle.MSG_PersonTitle());
        dd.createNotificationLineSupport();
        dd.getNotificationLineSupport().setErrorMessage(
                Bundle.MSG_PersonRequiredFields());
        dd.setValid(false);
        panel2.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent pce) {
                if (pce.getPropertyName().equals(CustomPersonPanel2.PROP_FIRST_NAME)
                        || pce.getPropertyName().equals(CustomPersonPanel2.PROP_LAST_NAME)) {
                    if (panel2.getFirstName().isEmpty() || panel2.getLastName().isEmpty()) {
                        dd.setValid(false);
                        dd.getNotificationLineSupport().setErrorMessage(
                                Bundle.MSG_PersonRequiredFields());
                    } else {
                        dd.setValid(true);
                        dd.getNotificationLineSupport().clearMessages();
                    }
                }
            }
        });

        Object status = DialogDisplayer.getDefault().notify(dd);
        if (status == NotifyDescriptor.OK_OPTION) {
            statusLabel.setText(Bundle.MSG_PersonHello() + panel2.getFirstName() + " "
                    + panel2.getLastName() + "!");
        } else if (status == NotifyDescriptor.CANCEL_OPTION) {
            statusLabel.setText(Bundle.MSG_PersonCancel());
        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogClosed());
        }
    }//GEN-LAST:event_welcomeErrorButtonActionPerformed

    @Messages({
        "MSG_OrderNotComplete=Your order is not complete."
    })
    private void errorMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorMessageButtonActionPerformed
        statusLabel.setText("");
        NotifyDescriptor nd = new NotifyDescriptor.Message(
                Bundle.MSG_OrderNotComplete(),
                NotifyDescriptor.ERROR_MESSAGE);
        Object status = DialogDisplayer.getDefault().notify(nd);
        if (status == NotifyDescriptor.OK_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogOK());
        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogClosed());
        }
    }//GEN-LAST:event_errorMessageButtonActionPerformed

    private void warningMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warningMessageButtonActionPerformed
        statusLabel.setText("");
        NotifyDescriptor nd = new NotifyDescriptor.Message(
                Bundle.MSG_OrderNotComplete(),
                NotifyDescriptor.WARNING_MESSAGE);
        Object status = DialogDisplayer.getDefault().notify(nd);
        if (status == NotifyDescriptor.OK_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogOK());
        } else if (status == NotifyDescriptor.CLOSED_OPTION) {
            statusLabel.setText(Bundle.MSG_DialogClosed());
        }
    }//GEN-LAST:event_warningMessageButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton errorMessageButton;
    private javax.swing.JButton infoMessageButton;
    private javax.swing.JButton inputButton;
    private javax.swing.JButton questionButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton warningMessageButton;
    private javax.swing.JButton welcomButton;
    private javax.swing.JButton welcomeErrorButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
