/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.personeditor;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.asgteach.personeditor//Open//EN",
autostore = false)
@TopComponent.Description(preferredID = "OpenTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.asgteach.personeditor.OpenTopComponent")
@ActionReference(path = "Menu/Window", position = 333)
@TopComponent.OpenActionRegistration(displayName = "#CTL_OpenAction",
preferredID = "OpenTopComponent")
@Messages({
    "CTL_OpenAction=Open",
    "CTL_OpenTopComponent=Open Window",
    "HINT_OpenTopComponent=This is a Open window"
})
public final class OpenTopComponent extends TopComponent {

    public OpenTopComponent() {

        initComponents();
        setName(Bundle.CTL_OpenTopComponent());
        setToolTipText(Bundle.HINT_OpenTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openPersonButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(openPersonButton, org.openide.util.NbBundle.getMessage(OpenTopComponent.class, "OpenTopComponent.openPersonButton.text")); // NOI18N
        openPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPersonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(openPersonButton)
                .addContainerGap(158, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(openPersonButton)
                .addContainerGap(242, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPersonButtonActionPerformed
        WindowManager wm = WindowManager.getDefault();
        TopComponent tc = new PersonTopComponent();
        Mode editorMode = wm.findMode("myeditor");
        if (editorMode != null) editorMode.dockInto(tc);
        tc.open();
        tc.requestActive();
    }//GEN-LAST:event_openPersonButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton openPersonButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
