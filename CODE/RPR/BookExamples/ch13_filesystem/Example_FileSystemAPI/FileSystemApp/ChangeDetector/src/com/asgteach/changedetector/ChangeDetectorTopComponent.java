/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.changedetector;

import java.awt.Color;
import java.awt.Insets;
import java.io.File;
import java.io.IOException;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileAttributeEvent;
import org.openide.filesystems.FileChangeListener;
import org.openide.filesystems.FileEvent;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileRenameEvent;
import org.openide.filesystems.FileStateInvalidException;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import org.openide.windows.OutputWriter;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.asgteach.changedetector//ChangeDetector//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ChangeDetectorTopComponent",
        iconBase = "com/asgteach/changedetector/check.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.asgteach.changedetector.ChangeDetectorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ChangeDetectorAction",
        preferredID = "ChangeDetectorTopComponent"
)
@Messages({
    "CTL_ChangeDetectorAction=ChangeDetector",
    "CTL_ChangeDetectorTopComponent=ChangeDetector Window",
    "HINT_ChangeDetectorTopComponent=This is a ChangeDetector window",
    "CTL_ChangeLabel=Watch Directory"
})
public final class ChangeDetectorTopComponent extends TopComponent {

    private FileObject root;
    private OutputWriter writer;
    private boolean updateOK = true;
    public static final String FO_MODIFICATION_COLOR = "FOModificationColor";

    public ChangeDetectorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ChangeDetectorTopComponent());
        setToolTipText(Bundle.HINT_ChangeDetectorTopComponent());
        display.setMargin(new Insets(5, 5, 5, 5));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextPane();

        jScrollPane1.setViewportView(display);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane display;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        InputOutput io = IOProvider.getDefault().getIO(Bundle.CTL_ChangeLabel(), false);
        io.select(); // tab is selected
        writer = io.getOut();
        String home = System.getProperty("user.home");
        File file = new File(home + "/FamilyTreeData");
        root = FileUtil.toFileObject(file);
        if (root == null) {
            displayMessage("Warning: File Object " + file.getPath() + " does not exist.");
            displayMessage("Create " + file.getPath() + ", close & reopen Window " + Bundle.CTL_ChangeDetectorTopComponent());
            return;
        }
//        FileUtil.addRecursiveListener(fcl, file);
        root.addRecursiveListener(fcl);
        displayMessage("Recursive File listener installed for " + root.getPath() + "!");
        updateDisplay();
    }

    @Override
    protected void componentActivated() {
        if (root != null) {
            try {
                root.getParent().getFileSystem().refresh(true);
                displayMessage("Component Activated: Refresh on parent.");
                updateDisplay();
            } catch (FileStateInvalidException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    @Override
    public void componentClosed() {
        if (root != null) {
            root.removeFileChangeListener(fcl);
        }
    }

    private void displayFiles(FileObject fo) {
        Color displayColor = (Color) fo.getAttribute(FO_MODIFICATION_COLOR);
        if (displayColor == null) {
            displayColor = Color.DARK_GRAY;
        }

        appendToDisplay(FileUtil.getFileDisplayName(fo) + "\n", displayColor);
        if (FileUtil.isArchiveFile(fo)) {
            FileObject arcRoot = FileUtil.getArchiveRoot(fo);
            displayFiles(arcRoot);
        } else if (fo.isFolder()) {
            for (FileObject childFileObject : fo.getChildren()) {
                displayFiles(childFileObject);
            }
        }
    }

    private void appendToDisplay(String msg, Color c) {
        display.setEditable(true);
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet attrset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        attrset = sc.addAttribute(attrset, StyleConstants.FontFamily, "Lucida Console");
        attrset = sc.addAttribute(attrset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        display.setCaretPosition(display.getDocument().getLength());
        display.setCharacterAttributes(attrset, false);
        display.replaceSelection(msg);
        display.setEditable(false);
    }

    private void updateDisplay() {
        if (root == null || !updateOK) {
            return;
        }
        updateOK = false;
        display.setText("");
        displayFiles(root);
        updateOK = true;

    }

    private void displayMessage(String message) {
        writer.println(message);
    }

    private final FileChangeListener fcl = new FileChangeListener() {

        @Override
        public void fileFolderCreated(FileEvent fe) {
            displayMessage("File Folder Created: " + fe.getFile().getPath());
            try {
                fe.getFile().setAttribute(FO_MODIFICATION_COLOR, Color.GREEN);
                updateDisplay();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }            
        }

        @Override
        public void fileDataCreated(FileEvent fe) {
            displayMessage("File Data (file) Created: " + fe.getFile().getPath());
            try {
                fe.getFile().setAttribute(FO_MODIFICATION_COLOR, Color.ORANGE);
                updateDisplay();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        public void fileChanged(FileEvent fe) {
            displayMessage("File Changed: " + fe.getFile().getPath());
            try {
                fe.getFile().setAttribute(FO_MODIFICATION_COLOR, Color.BLUE);
                updateDisplay();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        public void fileDeleted(FileEvent fe) {
            displayMessage("File/Folder Deleted: " + fe.getFile().getPath());
            updateDisplay();
        }

        @Override
        public void fileRenamed(FileRenameEvent fre) {
            displayMessage("File Renamed: " + fre.getFile().getPath());
            try {
                fre.getFile().setAttribute(FO_MODIFICATION_COLOR, Color.MAGENTA);
                updateDisplay();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        public void fileAttributeChanged(FileAttributeEvent fae) {
        }
    };

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
