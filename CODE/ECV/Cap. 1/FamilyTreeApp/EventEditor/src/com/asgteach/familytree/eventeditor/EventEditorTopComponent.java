/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.familytree.eventeditor;

import com.asgteach.familytree.capabilityinterfaces.SavableEventCapability;
import com.asgteach.familytree.editorinterfaces.EventEditor;
import com.asgteach.familytree.editorinterfaces.EventEditorManager;
import com.asgteach.familytree.model.ChildParentEvent;
import com.asgteach.familytree.model.Death;
import com.asgteach.familytree.model.Divorce;
import com.asgteach.familytree.model.Event;
import com.asgteach.familytree.model.FamilyTreeManager;
import com.asgteach.familytree.model.Marriage;
import com.asgteach.familytree.model.ParentChildEvent;
import com.asgteach.familytree.model.Person;
import com.asgteach.familytree.utilities.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.DialogDisplayer;
import org.openide.LifecycleManager;
import org.openide.NotifyDescriptor;
import org.openide.nodes.*;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.asgteach.familytree.eventeditor//EventEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "EventEditorTopComponent",
iconBase = "com/asgteach/familytree/utilities/eventIcon.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_EventEditorAction=EventEditor",
    "CTL_EventEditorTopComponent=EventEditor Window",
    "HINT_EventEditorTopComponent=This is a EventEditor window",
    "CTL_EventEditorSaveDialogTitle=Unsaved Data",
    "# {0} - event",
    "CTL_EventEditorSaveDialogMsg=Event {0} has Unsaved Data. \nSave Event?"
})
@ServiceProvider(service = EventEditor.class)
public final class EventEditorTopComponent extends TopComponent implements
        EventEditor, PropertyChangeListener {

    private EventCapability eventCapability;
    private Person person;
    private Event event;
    private boolean noUpdate;
    private boolean readyToListen = false;
    private Node eventNode;
    private InstanceContent ic = new InstanceContent();
    private Date tempdate;
    private FamilyTreeManager ftm;
    private static final Logger logger = Logger.getLogger(EventEditorTopComponent.class.getName());

    public EventEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_EventEditorTopComponent());
        setToolTipText(Bundle.HINT_EventEditorTopComponent());
        associateLookup(new AbstractLookup(ic));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        dateTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        countryTextField = new javax.swing.JTextField();
        this.countryTextField.getDocument().addDocumentListener(this.docListener);
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        townTextField = new javax.swing.JTextField();
        this.townTextField.getDocument().addDocumentListener(this.docListener);
        jLabel1 = new javax.swing.JLabel();
        stateTextField = new javax.swing.JTextField();
        this.stateTextField.getDocument().addDocumentListener(this.docListener);
        eventLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        eventLayeredPane = new javax.swing.JLayeredPane();
        exPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        exLabel = new javax.swing.JLabel();
        spousePanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        spouseLabel = new javax.swing.JLabel();
        childPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        childLabel = new javax.swing.JLabel();
        birthAdoptPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        parent1Label = new javax.swing.JLabel();
        parent2Label = new javax.swing.JLabel();
        blankPanel = new javax.swing.JPanel();
        personName = new javax.swing.JLabel();

        dateTextField.setText(org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.dateTextField.text")); // NOI18N
        dateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel4.text")); // NOI18N

        countryTextField.setText(org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.countryTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel3.text")); // NOI18N

        townTextField.setText(org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.townTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel1.text")); // NOI18N

        stateTextField.setText(org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.stateTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(eventLabel, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.eventLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.idLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(exLabel, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.exLabel.text")); // NOI18N

        javax.swing.GroupLayout exPanelLayout = new javax.swing.GroupLayout(exPanel);
        exPanel.setLayout(exPanelLayout);
        exPanelLayout.setHorizontalGroup(
            exPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel12)
                .addGap(47, 47, 47)
                .addComponent(exLabel)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        exPanelLayout.setVerticalGroup(
            exPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(exPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(exLabel))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        exPanel.setBounds(20, 0, 350, 118);
        eventLayeredPane.add(exPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(spouseLabel, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.spouseLabel.text")); // NOI18N

        javax.swing.GroupLayout spousePanelLayout = new javax.swing.GroupLayout(spousePanel);
        spousePanel.setLayout(spousePanelLayout);
        spousePanelLayout.setHorizontalGroup(
            spousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spousePanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spouseLabel)
                .addContainerGap(269, Short.MAX_VALUE))
        );
        spousePanelLayout.setVerticalGroup(
            spousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spousePanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(spousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(spouseLabel))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        spousePanel.setBounds(20, 0, 350, 118);
        eventLayeredPane.add(spousePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(childLabel, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.childLabel.text")); // NOI18N

        javax.swing.GroupLayout childPanelLayout = new javax.swing.GroupLayout(childPanel);
        childPanel.setLayout(childPanelLayout);
        childPanelLayout.setHorizontalGroup(
            childPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(childPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(childLabel)
                .addContainerGap(265, Short.MAX_VALUE))
        );
        childPanelLayout.setVerticalGroup(
            childPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(childPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(childPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(childLabel))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        childPanel.setBounds(20, 0, 340, 118);
        eventLayeredPane.add(childPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.jLabel9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(parent1Label, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.parent1Label.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(parent2Label, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.parent2Label.text")); // NOI18N

        javax.swing.GroupLayout birthAdoptPanelLayout = new javax.swing.GroupLayout(birthAdoptPanel);
        birthAdoptPanel.setLayout(birthAdoptPanelLayout);
        birthAdoptPanelLayout.setHorizontalGroup(
            birthAdoptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(birthAdoptPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(birthAdoptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(birthAdoptPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(parent2Label))
                    .addGroup(birthAdoptPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(parent1Label)))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        birthAdoptPanelLayout.setVerticalGroup(
            birthAdoptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(birthAdoptPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(birthAdoptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(parent1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(birthAdoptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(parent2Label))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        birthAdoptPanel.setBounds(20, 0, 340, 118);
        eventLayeredPane.add(birthAdoptPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
        blankPanel.setLayout(blankPanelLayout);
        blankPanelLayout.setHorizontalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        blankPanelLayout.setVerticalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        blankPanel.setBounds(10, 0, 360, 110);
        eventLayeredPane.add(blankPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.openide.awt.Mnemonics.setLocalizedText(personName, org.openide.util.NbBundle.getMessage(EventEditorTopComponent.class, "EventEditorTopComponent.personName.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(countryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                        .addComponent(dateTextField)
                                        .addComponent(stateTextField)
                                        .addComponent(townTextField))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(personName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 63, Short.MAX_VALUE))
                            .addComponent(eventLayeredPane, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel)
                            .addComponent(eventLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(idLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(eventLabel))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(personName))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(townTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eventLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextFieldActionPerformed
        SimpleDateFormat format = new SimpleDateFormat("MMM dd, yyyy");
        try {
            tempdate =
                    DateFormat.getDateInstance().parse(this.dateTextField.getText());

            this.dateTextField.setText(format.format(tempdate));
            if (readyToListen) {
                modify();
            }
        } catch (ParseException exception) {
            this.dateTextField.setText(format.format(event.getEventDate()));
            tempdate = event.getEventDate();
        }
    }//GEN-LAST:event_dateTextFieldActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel birthAdoptPanel;
    private javax.swing.JPanel blankPanel;
    private javax.swing.JLabel childLabel;
    private javax.swing.JPanel childPanel;
    private javax.swing.JTextField countryTextField;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JLabel eventLabel;
    private javax.swing.JLayeredPane eventLayeredPane;
    private javax.swing.JLabel exLabel;
    private javax.swing.JPanel exPanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel parent1Label;
    private javax.swing.JLabel parent2Label;
    private javax.swing.JLabel personName;
    private javax.swing.JLabel spouseLabel;
    private javax.swing.JPanel spousePanel;
    private javax.swing.JTextField stateTextField;
    private javax.swing.JTextField townTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        setName(event.getEventName() + ": " + event.getPerson());
        person = event.getPerson();
        this.ftm = Lookup.getDefault().lookup(FamilyTreeManager.class);
        if (ftm == null) {
            logger.log(Level.SEVERE, "Cannot get FamilyTreeManager object");
            LifecycleManager.getDefault().exit();
        }
        ftm.addPropertyChangeListener(this);
    }

    @Override
    public void componentClosed() {
        ftm.removePropertyChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void updateForm() {
        logger.log(Level.FINER, "updateForm");

        this.readyToListen = false;
        this.noUpdate = true;

        // make sure the tab name is current
        setName(event.getEventName() + ": " + event.getPerson());
        this.idLabel.setText("" + this.event.getId());
        this.eventLabel.setText(this.event.getEventName());
        SimpleDateFormat format = new SimpleDateFormat("MMM dd, yyyy");
        this.tempdate = event.getEventDate();

        this.dateTextField.setText(format.format(this.event.getEventDate()));
        this.personName.setText(event.getPerson().toString());
        this.townTextField.setText(event.getTown());
        this.stateTextField.setText(event.getState_province());
        this.countryTextField.setText(event.getCountry());
        if (event instanceof Death) {
            eventLayeredPane.moveToFront(blankPanel);
        } else if (event instanceof ParentChildEvent) {
            List<String> parents = new ArrayList<String>();
            for (Person p : ((ParentChildEvent) event).getParents()) {
                parents.add(p.toString());
            }
            if (parents.size() > 0) {
                this.parent1Label.setText(parents.get(0));
            } else {
                this.parent1Label.setText("");
            }
            if (parents.size() > 1) {
                this.parent2Label.setText(parents.get(1));
            } else {
                this.parent2Label.setText("");
            }
            eventLayeredPane.moveToFront(birthAdoptPanel);
        } else if (event instanceof ChildParentEvent) {
            if (((ChildParentEvent) event).getChild() != null) {
                this.childLabel.setText(((ChildParentEvent) event).getChild().toString());
            } else {
                this.childLabel.setText("");
            }
            eventLayeredPane.moveToFront(childPanel);
        } else if (event instanceof Marriage) {
            if (((Marriage) event).getSpouse() != null) {
                this.spouseLabel.setText(((Marriage) event).getSpouse().toString());
            } else {
                this.spouseLabel.setText("");
            }
            eventLayeredPane.moveToFront(spousePanel);
        } else if (event instanceof Divorce) {
            if (((Divorce) event).getEx() != null) {
                this.exLabel.setText(((Divorce) event).getEx().toString());
            } else {
                this.exLabel.setText("");
            }
            eventLayeredPane.moveToFront(exPanel);
        }
        this.noUpdate = false;
        this.readyToListen = true;
    }
    private final DocumentListener docListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent evt) {
            if (readyToListen) {
                modify();
            }
        }

        @Override
        public void removeUpdate(DocumentEvent evt) {
            if (readyToListen) {
                modify();
            }
        }

        @Override
        public void changedUpdate(DocumentEvent evt) {
            if (readyToListen) {
                modify();
            }
        }
    };

    private void modify() {
        if (getLookup().lookup(SavableViewCapability.class) == null) {
            ic.add(new SavableViewCapability());
        }
    }

    @Override
    public boolean canClose() {
        SavableViewCapability savable = getLookup().lookup(SavableViewCapability.class);
        if (savable == null) {
            return true;
        }
        String msg = Bundle.CTL_EventEditorSaveDialogMsg(event.getEventName());
        NotifyDescriptor nd = new NotifyDescriptor.Confirmation(msg, NotifyDescriptor.YES_NO_CANCEL_OPTION);
        nd.setTitle(Bundle.CTL_EventEditorSaveDialogTitle());
        Object result = DialogDisplayer.getDefault().notify(nd);
        if (result == NotifyDescriptor.CANCEL_OPTION || result == NotifyDescriptor.CLOSED_OPTION) {
            return false;
        }
        if (result == NotifyDescriptor.NO_OPTION) {
            clearSaveCapability();
            return true;
        }
        try {
            clearSaveCapability();
            savable.handleSave();
            return true;
        } catch (IOException ex) {
            logger.log(Level.WARNING, null, ex);
            return false;
        }
    }

    private void setEvent(Event event) {
        this.event = event;
    }

    @Override
    public void setNode(Node node) {
        this.eventNode = node;
        eventCapability = eventNode.getLookup().lookup(EventCapability.class);
        setEvent(eventNode.getLookup().lookup(Event.class));
        person = event.getPerson();
        // Add eventNode to the lookup
        ic.add(eventNode);
        logger.log(Level.FINER, "Editing Event {0}", event);
        updateForm();
    }

    @Override
    public TopComponent getTopComponent() {
        return EventEditorTopComponent.this;
    }

    private void clearSaveCapability() {
        SavableViewCapability svc = getLookup().lookup(SavableViewCapability.class);
        while (svc != null) {
            svc.removeSavable();
            this.ic.remove(svc);
            svc = this.getLookup().lookup(SavableViewCapability.class);
        }

    }

    private class SavableViewCapability extends AbstractSavable {

        SavableViewCapability() {
            register();
        }

        public void removeSavable() {
            unregister();
        }

        @Override
        protected String findDisplayName() {
            return event.getEventName() + ": " + event.getPerson().toString();
        }

        @Override
        protected void handleSave() throws IOException {
            final SavableEventCapability saveEvent =
                    eventCapability.getLookup().lookup(SavableEventCapability.class);
            tc().ic.remove(this);
            updateEvent();

            SwingWorker<Event, Void> worker = new SwingWorker<Event, Void>() {
                @Override
                public Event doInBackground() {
                    try {
                        saveEvent.save(event);
                    } catch (Exception e) {
                        logger.log(Level.WARNING, null, e);
                    }
                    return event;
                }

                @Override
                public void done() {
                    updateForm();
                }
            };
            worker.execute();
        }

        @Override
        public boolean equals(Object other) {
            if (other instanceof SavableViewCapability) {
                SavableViewCapability sv = (SavableViewCapability) other;
                return tc() == sv.tc();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }

        EventEditorTopComponent tc() {
            return EventEditorTopComponent.this;
        }
    }

    private void updateEvent() {
        if (this.noUpdate) {
            return;
        }
        this.event.setEventDate(tempdate);
        this.event.setCountry(this.countryTextField.getText());
        this.event.setState_province(this.stateTextField.getText());
        this.event.setTown(this.townTextField.getText());
        setName(event.getEventName() + ": " + event.getPerson());
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if (pce.getPropertyName().equals(FamilyTreeManager.PROP_PERSON_UPDATED)) {
            if (pce.getOldValue() != null
                    && (((Person) pce.getOldValue()).getId()) == event.getPerson().getId()) {
                event.setPerson((Person) pce.getOldValue());
                WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
                    @Override
                    public void run() {
                        setName(event.getEventName() + ": " + event.getPerson());
                        personName.setText(event.getPerson().toString());
                    }
                });
            }

        } else if (pce.getPropertyName().equals(FamilyTreeManager.PROP_EVENT_DESTROYED)) {
            if (pce.getOldValue() != null
                    && (((Event) pce.getOldValue()).getId()) == event.getId()) {
                logger.log(Level.FINER, "detected Event destroyed for {0}", event);
                clearSaveCapability();
                EventEditorManager eem = Lookup.getDefault().lookup(EventEditorManager.class);
                if (eem != null) {
                    eem.unregisterEditor(event);
                    EventEditorTopComponent.shutdown(this);
                }
            }
        } else if (pce.getPropertyName().equals(FamilyTreeManager.PROP_EVENT_UPDATED)) {

            if (pce.getOldValue() != null
                    && (((Event) pce.getOldValue()).getId()) == event.getId()) {
                logger.log(Level.FINER, "updated event {0}", event);
                // update from oldValue
                this.readyToListen = false;
                this.noUpdate = true;
                Event changedEvent = ((Event) pce.getOldValue());
                event.setCountry(changedEvent.getCountry());
                event.setEventDate(changedEvent.getEventDate());
                event.setState_province(changedEvent.getState_province());
                event.setTown(changedEvent.getTown());
                updateForm();
            }
        }
    }

    public static void shutdown(final TopComponent tc) {
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                tc.close();
            }
        });
    }
}
