/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.familytree.personeditor;

import com.asgteach.familytree.capabilityinterfaces.SavablePersonCapability;
import com.asgteach.familytree.editorinterfaces.PersonEditor;
import com.asgteach.familytree.editorinterfaces.PersonEditorManager;
import com.asgteach.familytree.model.FamilyTreeManager;
import com.asgteach.familytree.utilities.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import com.asgteach.familytree.model.Person;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.DialogDisplayer;
import org.openide.LifecycleManager;
import org.openide.NotifyDescriptor;
import org.openide.awt.UndoRedo;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.asgteach.familytree.personeditor//PersonEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "PersonEditorTopComponent",
iconBase = "com/asgteach/familytree/utilities/personIcon.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_PersonEditorAction=PersonEditor",
    "CTL_PersonEditorTopComponent=PersonEditor Window",
    "HINT_PersonEditorTopComponent=This is a PersonEditor window",
    "CTL_PersonEditorSaveDialogTitle=Unsaved Data",
    "# {0} - person",
    "CTL_PersonEditorSaveDialogMsg=Person {0} has Unsaved Data. \nSave Person?"
})
@ServiceProvider(service = PersonEditor.class)
public final class PersonEditorTopComponent extends TopComponent implements
        PersonEditor, PropertyChangeListener {

    private PersonCapability personCapability;
    private Person person;
    private FamilyTreeManager ftm;
    private boolean noUpdate;
    private boolean readyToListen = false;
    private PersonCapabilityNode personNode;
    private static final Logger logger = Logger.getLogger(PersonEditorTopComponent.class.getName());
    // we'll put SavableViewCapability in our lookup
    // (and other things!)
    InstanceContent ic = new InstanceContent();
    private UndoRedo.Manager manager = new UndoRedo.Manager();

    public PersonEditorTopComponent() {
        initComponents();
        //firstTF.getDocument().addUndoableEditListener(manager);
        setName(Bundle.CTL_PersonEditorTopComponent());
        setToolTipText(Bundle.HINT_PersonEditorTopComponent());
        associateLookup(new AbstractLookup(ic));
        firstTF.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                firstTF.getDocument().addUndoableEditListener(manager);
            }

            @Override
            public void keyPressed(KeyEvent e) {
                firstTF.getDocument().addUndoableEditListener(manager);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                firstTF.getDocument().addUndoableEditListener(manager);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        firstTF = new javax.swing.JTextField();
        this.firstTF.getDocument().addDocumentListener(this.docListener);
        middleTF = new javax.swing.JTextField();
        this.middleTF.getDocument().addDocumentListener(this.docListener);
        lastTF = new javax.swing.JTextField();
        this.lastTF.getDocument().addDocumentListener(this.docListener);
        suffixTF = new javax.swing.JTextField();
        this.suffixTF.getDocument().addDocumentListener(this.docListener);
        jScrollPane1 = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        this.notesTextArea.getDocument().addDocumentListener(this.docListener);
        maleGenderButton = new javax.swing.JRadioButton();
        femaleGenderButton = new javax.swing.JRadioButton();
        unknownGenderButton = new javax.swing.JRadioButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.idLabel.text")); // NOI18N

        firstTF.setText(org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.firstTF.text")); // NOI18N

        middleTF.setText(org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.middleTF.text")); // NOI18N

        lastTF.setText(org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.lastTF.text")); // NOI18N

        suffixTF.setText(org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.suffixTF.text")); // NOI18N

        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        notesTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(notesTextArea);

        genderButtonGroup.add(maleGenderButton);
        org.openide.awt.Mnemonics.setLocalizedText(maleGenderButton, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.maleGenderButton.text")); // NOI18N
        maleGenderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleGenderButtonActionPerformed(evt);
            }
        });

        genderButtonGroup.add(femaleGenderButton);
        org.openide.awt.Mnemonics.setLocalizedText(femaleGenderButton, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.femaleGenderButton.text")); // NOI18N
        femaleGenderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleGenderButtonActionPerformed(evt);
            }
        });

        genderButtonGroup.add(unknownGenderButton);
        org.openide.awt.Mnemonics.setLocalizedText(unknownGenderButton, org.openide.util.NbBundle.getMessage(PersonEditorTopComponent.class, "PersonEditorTopComponent.unknownGenderButton.text")); // NOI18N
        unknownGenderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unknownGenderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(maleGenderButton)
                        .addGap(41, 41, 41)
                        .addComponent(femaleGenderButton)
                        .addGap(47, 47, 47)
                        .addComponent(unknownGenderButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(suffixTF, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lastTF, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(middleTF, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstTF, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(firstTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(middleTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lastTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(suffixTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maleGenderButton)
                    .addComponent(femaleGenderButton)
                    .addComponent(unknownGenderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maleGenderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleGenderButtonActionPerformed
        if (readyToListen) {
            modify();
        }
    }//GEN-LAST:event_maleGenderButtonActionPerformed

    private void femaleGenderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleGenderButtonActionPerformed
        if (readyToListen) {
            modify();
        }
    }//GEN-LAST:event_femaleGenderButtonActionPerformed

    private void unknownGenderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unknownGenderButtonActionPerformed
        if (readyToListen) {
            modify();
        }
    }//GEN-LAST:event_unknownGenderButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton femaleGenderButton;
    private javax.swing.JTextField firstTF;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastTF;
    private javax.swing.JRadioButton maleGenderButton;
    private javax.swing.JTextField middleTF;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JTextField suffixTF;
    private javax.swing.JRadioButton unknownGenderButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        setName(person.toString());
        this.ftm = Lookup.getDefault().lookup(FamilyTreeManager.class);
        if (ftm == null) {
            logger.log(Level.SEVERE, "Cannot get FamilyTreeManager object");
            LifecycleManager.getDefault().exit();
        }
        ftm.addPropertyChangeListener(this);
    }

    @Override
    public void componentClosed() {
        ftm.removePropertyChangeListener(this);
    }

    @Override
    public UndoRedo getUndoRedo() {
        return manager;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public boolean canClose() {
        SavableViewCapability savable = getLookup().lookup(SavableViewCapability.class);
        if (savable == null) {
            return true;
        }
        String msg = Bundle.CTL_PersonEditorSaveDialogMsg(person.toString());
        NotifyDescriptor nd = new NotifyDescriptor.Confirmation(msg, NotifyDescriptor.YES_NO_CANCEL_OPTION);
        nd.setTitle(Bundle.CTL_PersonEditorSaveDialogTitle());
        Object result = DialogDisplayer.getDefault().notify(nd);
        if (result == NotifyDescriptor.CANCEL_OPTION || result == NotifyDescriptor.CLOSED_OPTION) {
            return false;
        }
        if (result == NotifyDescriptor.NO_OPTION) {
            clearSaveCapability();
            return true;
        }
        try {
            clearSaveCapability();
            savable.handleSave();
            return true;
        } catch (IOException ex) {
            logger.log(Level.WARNING, null, ex);
            return false;
        }
    }
    private DocumentListener docListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent evt) {
            evt.getDocument().addUndoableEditListener(manager);
            if (readyToListen) {

                modify();
            }
        }

        @Override
        public void removeUpdate(DocumentEvent evt) {
            evt.getDocument().addUndoableEditListener(manager);
            if (readyToListen) {

                modify();
            }
        }

        @Override
        public void changedUpdate(DocumentEvent evt) {
            evt.getDocument().addUndoableEditListener(manager);
            if (readyToListen) {

                modify();
            }
        }
    };

    private void modify() {
        if (getLookup().lookup(SavableViewCapability.class) == null) {
            ic.add(new SavableViewCapability());
        }
    }

    private void updateForm() {
        logger.log(Level.FINER, "updateForm");
        this.readyToListen = false;
        this.noUpdate = true;
        clearSaveCapability();
        if (person.getGender().equals(Person.Gender.FEMALE)) {
            this.femaleGenderButton.getModel().setSelected(true);
        } else if (person.getGender().equals(Person.Gender.MALE)) {
            this.maleGenderButton.getModel().setSelected(true);
        } else {
            this.unknownGenderButton.getModel().setSelected(true);
        }
        this.idLabel.setText("" + this.person.getId());
        this.firstTF.setText(this.person.getFirstname());
        this.middleTF.setText(this.person.getMiddlename());
        this.lastTF.setText(this.person.getLastname());
        this.suffixTF.setText(this.person.getSuffix());
        this.notesTextArea.setText(this.person.getNotes());
        this.noUpdate = false;
        this.readyToListen = true;
    }

    private void clearSaveCapability() {
        SavableViewCapability svc = getLookup().lookup(SavableViewCapability.class);
        while (svc != null) {
            svc.removeSavable();
            this.ic.remove(svc);
            svc = this.getLookup().lookup(SavableViewCapability.class);
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {

        if (pce.getPropertyName().equals(FamilyTreeManager.PROP_PERSON_UPDATED)) {
            // we only care about this to update the tab name
            if (pce.getOldValue() != null
                    && (((Person) pce.getOldValue()).getId()) == person.getId()) {
                person = (Person) pce.getOldValue();
                WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
                    @Override
                    public void run() {
                        setName(person.toString());
                    }
                });
            }
        } else if (pce.getPropertyName().equals(FamilyTreeManager.PROP_PERSON_DESTROYED)) {
            if (pce.getOldValue() != null
                    && (((Person) pce.getOldValue()).getId()) == person.getId()) {
                logger.log(Level.FINER, "detected Person destroyed for {0}", person);
                clearSaveCapability();
                PersonEditorManager pem = Lookup.getDefault().lookup(PersonEditorManager.class);
                if (pem != null) {
                    pem.unregisterEditor(person);
                    PersonEditorTopComponent.shutdown(this);
                }
            }
        }
    }

    @Override
    public void setNode(Node node) {
        if (node instanceof PersonCapabilityNode) {
            this.personNode = (PersonCapabilityNode) node;
            personCapability = personNode.getLookup().lookup(PersonCapability.class);
            this.person = personNode.getLookup().lookup(Person.class);
            // Add personNode to the lookup
            ic.add(personNode);
            logger.log(Level.FINER, "Editing Person {0}", person);           
            updateForm();
        }
    }

    @Override
    public TopComponent getTopComponent() {
        return PersonEditorTopComponent.this;
    }

    private class SavableViewCapability extends AbstractSavable {

        SavableViewCapability() {
            register();
        }

        public void removeSavable() {
            unregister();
        }

        @Override
        protected String findDisplayName() {
            return firstTF.getText() + " " + lastTF.getText();
        }

        @Override
        protected void handleSave() throws IOException {
            final SavablePersonCapability saveable =
                    personCapability.getLookup().lookup(SavablePersonCapability.class);
            tc().ic.remove(this);
            updatePerson();
            
            SwingWorker<Person, Void> worker = new SwingWorker<Person, Void>() {
                @Override
                public Person doInBackground() {                    
                    try {
                        saveable.save(person);
                    } catch (Exception e) {
                        logger.log(Level.WARNING, null, e);
                    }
                    return person;
                }

                @Override
                public void done() {
                    updateForm();
                }
            };
            worker.execute();
        }

        @Override
        public boolean equals(Object other) {
            if (other instanceof SavableViewCapability) {
                SavableViewCapability sv = (SavableViewCapability) other;
                return tc() == sv.tc();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }

        PersonEditorTopComponent tc() {
            return PersonEditorTopComponent.this;
        }
    }

    private void updatePerson() {
        if (this.noUpdate) {
            return;
        }
        this.person.setFirstname(this.firstTF.getText());
        this.person.setMiddlename(this.middleTF.getText());
        this.person.setLastname(this.lastTF.getText());
        this.person.setSuffix(this.suffixTF.getText());
        if (this.femaleGenderButton.isSelected()) {
            this.person.setGender(Person.Gender.FEMALE);
        } else if (this.maleGenderButton.isSelected()) {
            this.person.setGender(Person.Gender.MALE);
        } else if (this.unknownGenderButton.isSelected()) {
            this.person.setGender(Person.Gender.UNKNOWN);
        }
        this.person.setNotes(this.notesTextArea.getText());
        setName(person.toString());
    }

    public static void shutdown(final TopComponent tc) {
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                tc.close();
            }
        });
    }
}
