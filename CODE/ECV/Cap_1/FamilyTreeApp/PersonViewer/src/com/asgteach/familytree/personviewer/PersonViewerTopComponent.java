/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.asgteach.familytree.personviewer;

import com.asgteach.familytree.capabilityinterfaces.ReloadableViewCapability;
import com.asgteach.familytree.model.FamilyTreeManager;
import com.asgteach.familytree.utilities.DeleteNodeAction;
import com.asgteach.familytree.utilities.PersonCapabilityNode;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.LifecycleManager;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.asgteach.familytree.personviewer//PersonViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "PersonViewerTopComponent",
iconBase = "com/asgteach/familytree/utilities/personIcon.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "com.asgteach.familytree.personviewer.PersonViewerTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PersonViewerAction",
preferredID = "PersonViewerTopComponent")
@Messages({
    "CTL_PersonViewerAction=PersonViewer",
    "CTL_PersonViewerTopComponent=Person Viewer",
    "HINT_PersonViewerTopComponent=This is a Person Viewer window"
})
public final class PersonViewerTopComponent extends TopComponent implements
        PropertyChangeListener, ExplorerManager.Provider, LookupListener {

    private final ExplorerManager em = new ExplorerManager();
    private FamilyTreeManager ftm;
    private Lookup.Result<PersonCapabilityNode> result;
    private static final Logger logger = Logger.getLogger(PersonViewerTopComponent.class.getName());

    public PersonViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_PersonViewerTopComponent());
        setToolTipText(Bundle.HINT_PersonViewerTopComponent());
        setLayout(new BorderLayout());
        BeanTreeView btv = new BeanTreeView();
        btv.setRootVisible(true);
        add(btv, BorderLayout.CENTER);

        PersonRootNode node = new PersonRootNode();
        ActionMap map = this.getActionMap();
        // associates the key 'deletePerson' with the delete action
        map.put(DeleteNodeAction.ACTION_MAP_DELETE_KEY, ExplorerUtils.actionDelete(em, true));
        em.setRootContext(node);

        associateLookup(ExplorerUtils.createLookup(em, map));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        this.ftm = Lookup.getDefault().lookup(FamilyTreeManager.class);
        if (ftm == null) {
            logger.log(Level.SEVERE, "Cannot get FamilyTreeManager object");
            LifecycleManager.getDefault().exit();
        }
        ftm.addPropertyChangeListener(this);
        result = Utilities.actionsGlobalContext().lookupResult(PersonCapabilityNode.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        ftm.removePropertyChangeListener(this);
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if (pce.getPropertyName().equals(FamilyTreeManager.PROP_PERSON_DESTROYED)) {
            logger.log(Level.FINER, "detected Person destroyed");
            reloadView();
        }
    }
    
    private void reloadView() {
        Node node = this.em.getRootContext();
        ReloadableViewCapability rvc =
                node.getLookup().lookup(ReloadableViewCapability.class);
        try {
            rvc.reloadChildren();
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }        
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends PersonCapabilityNode> nodes = result.allInstances();
        // only get the selection if there is one
        // otherwise leave the selection unchanged!
        
        // If you want the selection window to clear
        // when the user clicks on a non-node thingy,
        // then remove the test for isEmpty
        if (!nodes.isEmpty()) {
            logger.log(Level.FINER, "Detected selection change");  
            try {
                em.setSelectedNodes(nodes.toArray(new PersonCapabilityNode[nodes.size()]));                
            } catch (PropertyVetoException ex) {
                logger.log(Level.WARNING, null, ex);
            }
        }
    }
}
